#!/usr/bin/env bash
#
# Library for generating a BMP image in bash
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: July 30, 2025
# License: MIT

u32le() {
	local n=$1 out

	# convert number into 4 octets
	# ex: input = 0x12345678
	# octet1: 0x12
	# octet2: 0x34
	# octet3: 0x56
	# octet4: 0x78
	local octet1=$(( (n >> 0)  & 0xFF))
	local octet2=$(( (n >> 8)  & 0xFF))
	local octet3=$(( (n >> 16) & 0xFF))
	local octet4=$(( (n >> 24) & 0xFF))

	printf -v out '\\x%02x' $octet1 $octet2 $octet3 $octet4
	printf '%b' "$out"
}

u16le() {
	local n=$1 out

	# convert number into 2 octets
	# ex: input = 0x1234
	# octet1: 0x12
	# octet2: 0x34
	local octet1=$(( (n >> 0) & 0xFF))
	local octet2=$(( (n >> 8) & 0xFF))

	printf -v out '\\x%02x' $octet1 $octet2
	printf '%b' "$out"
}

bmp-rgb() {
	local r=$1
	local g=$2
	local b=$3
	local out

	printf -v out '\\x%02x' $b $g $r
	printf '%b' "$out"
}

bmp-pad() {
	local padding=$1 i
	for ((i = 0; i < padding; i++)); do
		printf '\0'
	done
}

bmp-header() {
	local width=$1
	local height=$2

	local bits_per_px=24
	local bytes_per_px=$((bits_per_px / 8))

	local row_size=$((width * bytes_per_px))

	# align to a 4 byte boundary
	local padding=0
	while ((row_size % 4 != 0)); do
		((padding++))
		((row_size++))
	done

	local pixel_data_size=$((row_size * height))
	local pixel_data_offset=$((14 + 40))

	# size of entire file
	local file_size=$((pixel_data_size + pixel_data_offset))

	# Header (14 bytes)
	## Signature
	printf 'BM'

	## FileSize
	u32le "$file_size"

	## Reserved (=0)
	u32le 0

	## DataOffset
	u32le "$pixel_data_offset"

	# InfoHeader (40 bytes)
	## Size
	u32le 40

	## Width
	u32le "$width"

	## Height
	u32le "$height"

	## Planes (=1)
	u16le 1

	## BitCount
	u16le "$bits_per_px"

	## Compression
	u32le 0

	## ImageSize
	u32le 0

	## XPixelsPerM
	u32le 0

	## YPixelsPerM
	u32le 0

	## ColorsUsed
	u32le 0

	## ColorsImportant
	u32le 0

	REPLY=$padding
}
