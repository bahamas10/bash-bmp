#!/usr/bin/env bash
#
# Reads sprite data from stdin and outputs a bitmap version
# with the given palette.
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: July 29, 2025
# License: MIT

. ./lib/bmp || exit

declare -A PALETTE

debug() {
	echo '[debug]' "$@" >&2
}

make-bmp() {
	local SPRITE
	mapfile -t SPRITE

	local width=${#SPRITE[0]}
	local height=${#SPRITE[@]}

	bmp-header "$width" "$height"
	local padding=$REPLY

	local r g b y x
	for ((y = 0; y < height; y++)); do
		for ((x = 0; x < width; x++)); do
			local c=${SPRITE[height - y - 1]}
			c=${c:x:1}

			local r g b
			read -r r g b <<< "${PALETTE[$c]}"
			bmp-rgb "$r" "$g" "$b"
		done
		debug "handled row $((y + 1))/$height"
		bmp-pad "$padding"
	done
}

hex2rgb() {
	local hex=${1#\#}

	local r=$((16#${hex:0:2}))
	local g=$((16#${hex:2:2}))
	local b=$((16#${hex:4:2}))

	echo "$r $g $b"
}

load-palette() {
	local file=$1

	local lines
	mapfile -t lines < "$file" || exit

	local line
	for line in "${lines[@]}"; do
		local c hex
		c=${line:0:1}
		hex=${line:2}

		PALETTE[$c]=$(hex2rgb "$hex")
	done
}

main() {
	local output=out.bmp

	local palette
	local OPTIND OPTARG opt
	while getopts 'p:o:' opt; do
		case "$opt" in
			o) output=$OPTARG;;
			p) palette=$OPTARG;;
		esac
	done

	[[ -n $palette ]] || exit
	load-palette "$palette"

	make-bmp > "$output" || exit
	echo "generated image: $output"
}

main "$@"
